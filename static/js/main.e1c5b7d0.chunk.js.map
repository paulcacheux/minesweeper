{"version":3,"sources":["store/types.ts","store/actions.ts","components/Timer.tsx","components/Header.tsx","utils.ts","store/model.ts","store/reducers.ts","components/Cell.tsx","components/Board.tsx","components/Config.tsx","components/Footer.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","CLICK_CELL","FLAG_CELL","NEW_GAME","CHANGE_LEFT_CLICK_TOOL","flagCell","x","y","type","Timer","startDate","useSelector","state","useState","secs","setSecs","useEffect","interval","setInterval","undefined","diff","Date","getTime","diffSecs","Math","round","clearInterval","className","headerSelector","board","game","minesLeft","bombCount","flagCount","gameState","Header","props","image_src","dispatch","useDispatch","playing","overWin","overLose","id","title","onClick","alt","src","process","children","range","n","Array","from","length","value","key","Position","other","this","arrayContains","set","elem","check","isEqualTo","Model","width","height","setup","content","pushState","flags","errorCell","fill","randomFill","newBoard","bombIndices","arr","size","temp","index","shuffled","slice","i","floor","random","sample","isBomb","counter","buildNeighbors","neighbor","buildIndex","res","nx","ny","checkInBounds","push","getCellContent","assertInBounds","pos","clearFlag","positions","filter","getPushState","cellValue","switchToFailState","newPushed","openList","closedList","current","pop","Error","parseParam","params","query","defaultValue","strValue","get","parseInt","Number","isNaN","initialStateBuilder","search","window","location","URLSearchParams","bombs","initialState","launchTimer","CellState","rootReducer","combineReducers","action","clone","pushCell","isWin","clickCellInner","previous","isFlagged","setFlag","flagCellInner","tools","leftClickFlag","Cell","classes","pushed","Flag","Bomb","RedBomb","valueElement","join","onContextMenu","event","onRightClick","preventDefault","boardSelector","MacroCell","cellProps","boardValue","extractCellProps","Board","rows","map","BoardConfigLink","href","ToolConfigButton","active","targetConfig","Config","leftClickFlagCurrent","Footer","messages","logoUrl","msg","Main","store","createStore","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1c5b7d0.chunk.js","sourcesContent":["import Model from \"./model\";\n\nexport enum GameState {\n    playing,\n    overWin,\n    overLose,\n}\n\nexport interface BoardState {\n    gameState: GameState;\n    board: Model;\n    startDate?: Date | number;\n}\n\nexport interface ToolState {\n    leftClickFlag: boolean;\n}\n\nexport const CLICK_CELL = \"CLICK_CELL\";\nexport const FLAG_CELL = \"FLAG_CELL\";\nexport const NEW_GAME = \"NEW_GAME\";\nexport const CHANGE_LEFT_CLICK_TOOL = \"CHANGE_LEFT_CLICK_TOOL\";\n\ninterface ClickCellAction {\n    type: typeof CLICK_CELL;\n    x: number;\n    y: number;\n}\n\ninterface FlagCellAction {\n    type: typeof FLAG_CELL;\n    x: number;\n    y: number;\n}\n\ninterface ChangeLeftClickToolAction {\n    type: typeof CHANGE_LEFT_CLICK_TOOL;\n    leftClickFlag: boolean;\n}\n\ninterface NewGameAction {\n    type: typeof NEW_GAME;\n}\n\nexport type BoardActionTypes = ClickCellAction | FlagCellAction | NewGameAction;\nexport type ToolActionTypes = ChangeLeftClickToolAction;","import { CLICK_CELL, NEW_GAME, FLAG_CELL, CHANGE_LEFT_CLICK_TOOL } from \"./types\";\n\nexport function clickCell(x: number, y: number) {\n    return {\n        type: CLICK_CELL,\n        x: x,\n        y: y,\n    }\n}\n\nexport function flagCell(x: number, y: number) {\n    return {\n        type: FLAG_CELL,\n        x: x,\n        y: y,\n    }\n}\n\nexport function newGame() {\n    return {\n        type: NEW_GAME,\n    }\n}\n\nexport function changeTool(leftClickFlag: boolean) {\n    return {\n        type: CHANGE_LEFT_CLICK_TOOL,\n        leftClickFlag: leftClickFlag,\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BoardState } from \"../store/types\";\n\nexport const Timer: React.FC = () => {\n    const startDate = useSelector((state: BoardState) => state.startDate);\n    const [secs, setSecs] = useState(0);\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            if (startDate !== undefined) {\n                if (typeof startDate === \"number\") {\n                    setSecs(startDate);\n                } else {\n                    let endTime = new Date();\n                    let diff = (endTime.getTime() - startDate.getTime()) / 1000;\n                    let diffSecs = Math.round(diff);\n                    setSecs(diffSecs);\n                }\n            }\n        }, 500)\n\n        return () => {\n            clearInterval(interval)\n        };\n    })\n\n    return (\n        <p className=\"score-like\">{secs}</p>\n    );\n}\n\nexport default Timer;","import React from \"react\";\nimport \"../style/Header.css\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { newGame } from \"../store/actions\";\nimport { GameState } from \"../store/types\";\nimport Timer from \"./Timer\";\nimport { AppState } from \"../store/reducers\";\n\nconst headerSelector = (state: AppState) => {\n    const board = state.game.board;\n    let minesLeft = board.bombCount - board.flagCount();\n    return { gameState: state.game.gameState, minesLeft };\n}\n\nexport const Header: React.FC = (props) => {\n    const dispatch = useDispatch();\n    const { gameState, minesLeft } = useSelector(headerSelector);\n\n    let image_src;\n    switch (gameState) {\n        case GameState.playing:\n            image_src = \"happy_face.png\";\n            break;\n        case GameState.overWin:\n            image_src = \"glass_face.png\"\n            break;\n        case GameState.overLose:\n            image_src = \"sad_face.png\"\n            break;\n    }\n\n    return (\n        <header>\n            <h1>Minesweeper</h1>\n            <ul className=\"cmd-box\">\n                <li>\n                    <p>Time:</p>\n                    <Timer />\n                </li>\n                <li id=\"restart\">\n                    <button className=\"cell\" title=\"New Game\" onClick={() => dispatch(newGame())}>\n                        <img id=\"img-button\" alt=\"New Game\" src={process.env.PUBLIC_URL + \"/img/\" + image_src} />\n                    </button>\n                </li>\n                <li>\n                    <p>Mines:</p>\n                    <p className=\"score-like\">{minesLeft}</p>\n                </li>\n            </ul>\n            {props.children}\n        </header>\n    );\n}\n\nexport default Header;","export function sample<T>(arr: Array<T>, size: number): Array<T> {\n    var shuffled = arr.slice(0), i = arr.length, temp, index;\n    while (i--) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(0, size);\n}\n\nexport const range = (n: number) => Array.from({ length: n }, (value, key) => key);","import { sample, range } from \"../utils\";\n\nexport type CellContent = \"bomb\" | number;\n\nexport class BoardCell {\n    content: CellContent;\n    pushed: boolean;\n\n    constructor(content: CellContent, pushed = false) {\n        this.content = content;\n        this.pushed = pushed;\n    }\n}\n\nexport class Position {\n    constructor(public x: number, public y: number) {}\n\n    isEqualTo(other: Position): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n}\n\nfunction arrayContains(set: Array<Position>, elem: Position): boolean {\n    for (const check of set) {\n        if (elem.isEqualTo(check)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport default class Model {\n    width: number;\n    height: number;\n    bombCount: number;\n\n    content: Array<CellContent>;\n    pushState: Array<boolean>;\n    flags: Array<Position>;\n    errorCell?: Position = undefined;\n\n    constructor(width: number, height: number, bombCount: number, setup = true) {\n        this.width = width;\n        this.height = height;\n        this.bombCount = bombCount;\n\n        this.content = new Array(this.width * this.height).fill(0);\n        this.pushState = new Array(this.width * this.height).fill(false);\n        this.flags = [];\n        if (setup) {\n            this.randomFill();\n        }\n    }\n\n    clone(): Model {\n        let newBoard = new Model(this.width, this.height, this.bombCount, false);\n        newBoard.content = [...this.content];\n        newBoard.pushState = [...this.pushState];\n        newBoard.flags = [...this.flags];\n        return newBoard\n    }\n\n    randomFill() {\n        // place bombs\n        let bombIndices = sample(range(this.content.length), this.bombCount);\n        for (let i of bombIndices) {\n            this.content[i] = \"bomb\";\n        }\n\n        // count near bombs for each cells\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (!this.isBomb(x, y)) {\n                    let counter = 0;\n                    for (const neighbor of this.buildNeighbors(x, y)) {\n                        if (this.isBomb(neighbor.x, neighbor.y)) {\n                            counter += 1;\n                        }\n                    }\n                    this.content[this.buildIndex(x, y)] = counter;\n                }\n            }\n        }\n    }\n\n    buildIndex(x: number, y: number): number {\n        return y * this.width + x;\n    }\n\n    buildNeighbors(x: number, y: number): Array<Position> {\n        let offsets = [[-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0]];\n        let res: Array<Position> = [];\n        for (const [dx, dy] of offsets) {\n            let nx = x + dx;\n            let ny = y + dy;\n            if (this.checkInBounds(nx, ny)) {\n                res.push(new Position(nx, ny));\n            }\n        }\n        return res;\n    }\n\n    isBomb(x: number, y: number): boolean {\n        return this.getCellContent(x, y) === \"bomb\";\n    }\n\n    getCellContent(x: number, y: number): CellContent {\n        this.assertInBounds(x, y);\n        return this.content[this.buildIndex(x, y)];\n    }\n\n    getPushState(x: number, y: number): boolean {\n        this.assertInBounds(x, y);\n        return this.pushState[this.buildIndex(x, y)];\n    }\n\n    setFlag(x: number, y: number, value: boolean) {\n        this.assertInBounds(x, y);\n        let pos = new Position(x, y);\n        if (value && !arrayContains(this.flags, pos)) {\n            this.flags.push(pos);\n        } else if (!value) {\n            this.clearFlag([new Position(x, y)]);\n        }\n    }\n\n    flagCount(): number {\n        return this.flags.length;\n    }\n\n    clearFlag(positions: Array<Position>) {\n        this.flags = this.flags.filter(value => {\n            return !arrayContains(positions, value);\n        });\n    }\n\n    isFlagged(x: number, y: number): boolean {\n        this.assertInBounds(x, y);\n        return arrayContains(this.flags, new Position(x, y));\n    }\n\n    isWin() {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (this.getCellContent(x, y) !== \"bomb\" && !this.getPushState(x, y)) {\n                    return false\n                }\n            }\n        } \n        return true;\n    }\n\n    switchToFailState(x: number, y: number) {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (this.getCellContent(x, y) === \"bomb\") {\n                    this.pushState[this.buildIndex(x, y)] = true;\n                }\n            }\n        } \n        this.errorCell = new Position(x, y);\n    }\n\n    pushCell(x: number, y: number): boolean {\n        this.assertInBounds(x, y);\n        if (this.getPushState(x, y)) {\n            return false;\n        }\n\n        let cellValue = this.getCellContent(x, y);\n        if (cellValue === \"bomb\") {\n            this.switchToFailState(x, y);\n            return true;\n        } else {\n            let newPushed = [new Position(x, y)];\n            if (cellValue === 0) {\n                let openList: Array<Position> = [new Position(x, y)];\n                let closedList: Array<Position> = [];\n                while (openList.length > 0) {\n                    const current = openList.pop()!;\n                    closedList.push(current);\n\n                    for (const neighbor of this.buildNeighbors(current.x, current.y)) {\n                        if (!arrayContains(closedList, neighbor)) {\n                            newPushed.push(neighbor);\n                            if (this.getCellContent(neighbor.x, neighbor.y) === 0) {\n                                openList.push(neighbor)\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (const { x, y } of newPushed) {\n                this.pushState[this.buildIndex(x, y)] = true;\n            }\n            this.clearFlag(newPushed);\n            return false;\n        }\n    }\n\n    assertInBounds(x: number, y: number) {\n        if (!this.checkInBounds(x, y)) {\n            throw new Error(\"board out of bounds\");\n        }\n    }\n\n    checkInBounds(x: number, y: number): boolean {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n}\n\nexport class StepInfo {\n    model: Model;\n    isFail: boolean;\n\n    constructor(model: Model, isFail: boolean = false) {\n        this.model = model;\n        this.isFail = isFail;\n    }\n}","import { CLICK_CELL, BoardActionTypes, BoardState, NEW_GAME, FLAG_CELL, GameState, ToolActionTypes, ToolState, CHANGE_LEFT_CLICK_TOOL } from \"./types\";\nimport Model from \"./model\";\nimport { combineReducers } from \"redux\";\n\nconst parseParam = (params: URLSearchParams, query: string, defaultValue: number) => {\n    const strValue = params.get(query);\n    if (!strValue) {\n        return defaultValue;\n    }\n    const value = parseInt(strValue, 10);\n    if (Number.isNaN(value)) {\n        return defaultValue;\n    }\n    return value;\n}\n\nconst initialStateBuilder = (): BoardState => {\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n\n    const width = parseParam(params, \"width\", 9);\n    const height = parseParam(params, \"height\", 9);\n    const bombs = parseParam(params, \"bombs\", 10);\n\n    return {\n        board: new Model(width, height, bombs),\n        gameState: GameState.playing,\n        startDate: 0,\n    }\n}\n\nconst initialState: BoardState = initialStateBuilder();\n\nfunction clickCellInner(state: BoardState, x: number, y: number): BoardState {\n    let board = state.board.clone();\n    let isFail = board.pushCell(x, y);\n    if (isFail) {\n        return { board, gameState: GameState.overLose };\n    } else if (board.isWin()) {\n        return { board, gameState: GameState.overWin };\n    } else {\n        return { board, gameState: GameState.playing, startDate: state.startDate };\n    }\n}\n\nfunction flagCellInner(state: BoardState, x: number, y: number): BoardState {\n    if (state.board.getPushState(x, y)) {\n        return state;\n    } else {\n        let board = state.board.clone();\n        let previous = board.isFlagged(x, y);\n        board.setFlag(x, y, !previous);\n        return { ...state, board: board };\n    }\n}\n\nfunction launchTimer(state: BoardState): BoardState {\n    if (state.gameState === GameState.playing && (state.startDate === undefined || typeof state.startDate === \"number\")) {\n        return { ...state, startDate: new Date() };\n    } else {\n        return state;\n    }\n}\n\nexport function boardReducer(state = initialState, action: BoardActionTypes): BoardState {\n    switch (action.type) {\n        case CLICK_CELL:\n            if (state.gameState === GameState.playing) {\n                let x = action.x;\n                let y = action.y;\n                return launchTimer(clickCellInner(state, x, y));\n            } else {\n                return state;\n            }\n        case FLAG_CELL:\n            if (state.gameState === GameState.playing) {\n                let x = action.x;\n                let y = action.y;\n                return launchTimer(flagCellInner(state, x, y));\n            } else {\n                return state;\n            }\n        case NEW_GAME:\n            return initialStateBuilder();\n        default:\n            return state;\n    }\n}\n\nexport function toolReducer(state: ToolState = { leftClickFlag: false }, action: ToolActionTypes): ToolState {\n    switch (action.type) {\n        case CHANGE_LEFT_CLICK_TOOL:\n            return { leftClickFlag: action.leftClickFlag };\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({ game: boardReducer, tools: toolReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import React from \"react\";\nimport \"../style/Cell.css\";\n\nexport enum CellState {\n    Flag,\n    Bomb,\n    RedBomb,\n}\n\nexport interface ICellProps {\n    pushed: boolean,\n    state?: CellState,\n    value?: number,\n    onClick?(): void,\n    onRightClick?(): void,\n}\n\nexport const Cell: React.FC<ICellProps> = (props) => {\n    let classes = [\"cell\"];\n\n    if (props.pushed) {\n        classes.push(\"pushed\");\n    }\n\n    if (props.state !== undefined) {\n        switch (props.state) {\n            case CellState.Flag:\n                classes.push(\"flag\");\n                break;\n            case CellState.Bomb:\n                classes.push(\"bomb\");\n                break;\n            case CellState.RedBomb:\n                classes.push(\"bomb\");\n                classes.push(\"red\");\n                break;\n        }\n    }\n\n    let valueElement: JSX.Element | null = null;\n    if (props.value !== undefined) {\n        valueElement = <p>{props.value}</p>\n        classes.push(`cell${props.value}`);\n    }\n\n    const onRightClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        if (props.onRightClick) {\n            event.preventDefault();\n            props.onRightClick();\n        }\n    }\n\n    return (\n        <div className={classes.join(\" \")} onClick={() => props.onClick && props.onClick()} onContextMenu={onRightClick}>\n            {valueElement}\n        </div>\n    )\n}","import React from \"react\";\nimport { Cell, CellState, ICellProps } from \"./Cell\";\nimport \"../style/Board.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { range } from \"../utils\";\nimport Model, { Position } from \"../store/model\";\nimport { clickCell, flagCell } from \"../store/actions\";\nimport { AppState } from \"../store/reducers\";\n\nconst boardSelector = (state: AppState) => state.game.board;\n\nconst extractCellProps = (board: Model, x: number, y: number): ICellProps => {\n    let props: ICellProps = {\n        pushed: false,\n        value: undefined,\n        state: undefined,\n    };\n\n    props.pushed = board.getPushState(x, y);\n\n    if (props.pushed) {\n        let boardValue = board.getCellContent(x, y);\n        if (typeof boardValue === \"number\") {\n            if (boardValue > 0) {\n                props.value = boardValue;\n            }\n        } else {\n            if (board.errorCell && board.errorCell.isEqualTo(new Position(x, y))) {\n                props.state = CellState.RedBomb;\n            } else {\n                props.state = CellState.Bomb;\n            }\n        }\n    } else {\n        if (board.isFlagged(x, y)) {\n            props.state = CellState.Flag;\n        }\n    }\n\n    return props;\n}\n\ninterface IMacroCellProps {\n    board: Model;\n    x: number;\n    y: number;\n}\n\nconst MacroCell: React.FC<IMacroCellProps> = (props: IMacroCellProps) => {\n    const dispatch = useDispatch();\n    const leftClickFlag = useSelector((state: AppState) => state.tools.leftClickFlag);\n\n    let cellProps = extractCellProps(props.board, props.x, props.y);\n\n    return (<td>\n        <Cell pushed={cellProps.pushed} value={cellProps.value} state={cellProps.state} onClick={() => {\n            if (leftClickFlag) {\n                dispatch(flagCell(props.x, props.y));\n            } else {\n                dispatch(clickCell(props.x, props.y));\n            }\n        }} onRightClick={() => {\n            dispatch(flagCell(props.x, props.y));\n        }} />\n    </td>)\n}\n\nconst Board: React.FC = () => {\n    const board = useSelector(boardSelector);\n\n    let rows = range(board.height).map(y => {\n        return (<tr key={y}>\n            {\n                range(board.width).map(x => <MacroCell key={x} board={board} x={x} y={y} />)\n            }\n        </tr>);\n    })\n\n    return (\n        <table>\n            <tbody>{rows}</tbody>\n        </table>\n    );\n}\n\nexport default Board;","import React from \"react\";\nimport \"../style/Config.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeTool } from \"../store/actions\";\nimport { AppState } from \"../store/reducers\";\n\ninterface IBoardConfigProps {\n    title: string;\n    width: number;\n    height: number;\n    bombs: number;\n}\n\nconst BoardConfigLink: React.FC<IBoardConfigProps> = (props: IBoardConfigProps) => {\n    return (\n        <a className=\"btn select\" href={`?width=${props.width}&height=${props.height}&bombs=${props.bombs}`}>{props.title}</a>\n    );\n}\n\ninterface IClickConfigProps {\n    title: string;\n    active: boolean;\n    targetConfig: boolean;\n}\n\nconst ToolConfigButton: React.FC<IClickConfigProps> = (props: IClickConfigProps) => {\n    const dispatch = useDispatch();\n\n    let className = \"btn tool\";\n    if (props.active) {\n        className += \" active\";\n    }\n\n    const handler = () => {\n        dispatch(changeTool(props.targetConfig));\n    }\n\n    return (\n        <p className={className} onClick={handler}>{props.title}</p>\n    );\n}\n\nconst Config: React.FC = () => {\n    const leftClickFlagCurrent = useSelector((state: AppState) => state.tools.leftClickFlag);\n\n    return (\n        <div className=\"config\">\n            <div className=\"config-box\">\n                <div>\n                    <p className=\"config-label\">New game</p>\n                    <div className=\"btn-group\">\n                        <BoardConfigLink title=\"easy\" width={9} height={9} bombs={10} />\n                        <BoardConfigLink title=\"medium\" width={16} height={16} bombs={40} />\n                        <BoardConfigLink title=\"hard\" width={30} height={16} bombs={99} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"config-box\">\n                <div>\n                    <p className=\"config-label\">Touch mode</p>\n                    <div className=\"btn-group\">\n                        <ToolConfigButton title=\"open\" targetConfig={false} active={!leftClickFlagCurrent} />\n                        <ToolConfigButton title=\"flag\" targetConfig={true} active={leftClickFlagCurrent} />\n                    </div>\n                </div>\n            </div >\n        </div>\n    );\n}\n\nexport default Config;","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../store/types\";\nimport \"../style/Footer.css\"\nimport { AppState } from \"../store/reducers\";\n\nexport const Footer: React.FC = () => {\n    const gameState = useSelector((state: AppState) => state.game.gameState);\n\n    let messages: Array<string>;\n    let logoUrl: string;\n    switch (gameState) {\n        case GameState.overLose:\n            messages = [\"game over\", \"you lost\"];\n            logoUrl = \"logo_loose.png\";\n            break;\n        case GameState.overWin:\n            messages = [\"victory\"];\n            logoUrl = \"logo.png\";\n            break;\n        default:\n            return null;\n    }\n\n    return (\n        <footer>\n            <img id=\"logo\" alt=\"logo\" src={process.env.PUBLIC_URL + \"/img/\" + logoUrl} />\n            <div>\n                {messages.map((msg: string, index: number) => <p key={index} className=\"message\">{msg}</p>)}\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from \"react\";\nimport Board from \"./Board\";\nimport Config from \"./Config\";\nimport Footer from \"./Footer\";\nimport \"../style/Main.css\";\n\nconst Main: React.FC = () => {\n  return (\n    <main>\n      <Config />\n      <Board />\n      <Footer />\n    </main>\n  );\n}\n\nexport default Main;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./store/reducers\";\nimport { Provider } from \"react-redux\";\nimport Main from \"./components/Main\";\n\nconst store = createStore(rootReducer);\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Header />\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}